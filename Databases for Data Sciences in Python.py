# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uE9-xRfiGBzsAo7Xny4u9Ll08Qg2gsg0
"""

import pandas as pd
import sqlite3

# Connexion à la base de données SQLite
conn = sqlite3.connect("FinalDB.db")

# Téléchargement et chargement des datasets
census_url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DB0201EN-SkillsNetwork/labs/FinalModule_Coursera_V5/data/ChicagoCensusData.csv"
schools_url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DB0201EN-SkillsNetwork/labs/FinalModule_Coursera_V5/data/ChicagoPublicSchools.csv"
crime_url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DB0201EN-SkillsNetwork/labs/FinalModule_Coursera_V5/data/ChicagoCrimeData.csv"

# Charger les fichiers CSV dans des DataFrames pandas
census_df = pd.read_csv(census_url)
schools_df = pd.read_csv(schools_url)
crime_df = pd.read_csv(crime_url)

# Charger les données dans la base de données SQLite
census_df.to_sql("CENSUS_DATA", conn, if_exists="replace", index=False)
schools_df.to_sql("CHICAGO_PUBLIC_SCHOOLS", conn, if_exists="replace", index=False)
crime_df.to_sql("CHICAGO_CRIME_DATA", conn, if_exists="replace", index=False)

# Définir une fonction pour exécuter et afficher les requêtes SQL
def execute_query(query):
    return pd.read_sql_query(query, conn)

# **Problème 1 : Nombre total de crimes**
query1 = "SELECT COUNT(*) AS total_crimes FROM CHICAGO_CRIME_DATA;"
print(execute_query(query1))# **Problème 2 : Zones avec revenu par habitant < 11,000**
query2 = """
SELECT COMMUNITY_AREA_NAME, COMMUNITY_AREA_NUMBER
FROM CENSUS_DATA
WHERE PER_CAPITA_INCOME < 11000;
"""
print(execute_query(query2))

# **Problème 3 : Crimes impliquant des mineurs**
query3 = """
SELECT CASE_NUMBER
FROM CHICAGO_CRIME_DATA
WHERE DESCRIPTION LIKE '%minor%';
"""
print(execute_query(query3))

# **Problème 4 : Enlèvements impliquant des enfants**
query4 = """
SELECT CASE_NUMBER, PRIMARY_TYPE, DESCRIPTION
FROM CHICAGO_CRIME_DATA
WHERE PRIMARY_TYPE = 'KIDNAPPING' AND DESCRIPTION LIKE '%child%';
"""
print(execute_query(query4))

# **Problème 5 : Types de crimes dans les écoles**
query5 = """
SELECT DISTINCT PRIMARY_TYPE
FROM CHICAGO_CRIME_DATA
WHERE LOCATION_DESCRIPTION LIKE '%SCHOOL%';
"""
print(execute_query(query5))

# **Problème 6 : Types d'écoles et score moyen de sécurité**
query6 = """
SELECT "Elementary, Middle, or High School" AS SCHOOL_TYPE, AVG(SAFETY_SCORE) AS AVG_SAFETY_SCORE
FROM CHICAGO_PUBLIC_SCHOOLS
GROUP BY "Elementary, Middle, or High School";
"""
print(execute_query(query6))

# **Problème 7 : 5 zones avec le plus de pauvreté**
query7 = """
SELECT COMMUNITY_AREA_NAME, PERCENT_HOUSEHOLDS_BELOW_POVERTY AS POVERTY_PERCENTAGE
FROM CENSUS_DATA
ORDER BY POVERTY_PERCENTAGE DESC
LIMIT 5;
"""
print(execute_query(query7))

# **Problème 8 : Zone avec le plus de crimes**
query8 = """
SELECT COMMUNITY_AREA_NUMBER
FROM CHICAGO_CRIME_DATA
GROUP BY COMMUNITY_AREA_NUMBER
ORDER BY COUNT(*) DESC
LIMIT 1;
"""
print(execute_query(query8))

# **Problème 9 : Zone avec l'indice de difficulté le plus élevé**
query9 = """
SELECT COMMUNITY_AREA_NAME
FROM CENSUS_DATA
WHERE HARDSHIP_INDEX = (SELECT MAX(HARDSHIP_INDEX) FROM CENSUS_DATA);
"""
print(execute_query(query9))

# **Problème 10 : Zone avec le plus de crimes (nom de la communauté)**
query10 = """
SELECT COMMUNITY_AREA_NAME
FROM CENSUS_DATA
WHERE COMMUNITY_AREA_NUMBER = (
    SELECT COMMUNITY_AREA_NUMBER
    FROM CHICAGO_CRIME_DATA
    GROUP BY COMMUNITY_AREA_NUMBER
    ORDER BY COUNT(*) DESC
    LIMIT 1
);
"""
print(execute_query(query10))

# Fermer la connexion
conn.close()

